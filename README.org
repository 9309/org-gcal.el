* Org-Gcal [[http://melpa.org/#/org-gcal][file:http://melpa.org/packages/org-gcal-badge.svg]]
 =org-gcal= offers
  - Fetch google calendar event
  - Post/edit org element
  - Sync between Org and Gcal

Data will be UTF-8 encoded for sync.

* Getting Started

Follow the instructions at [[#Installation][Installation]], and then run ~org-gcal-fetch~ to
download Google Calendar events into your Org-mode files using the Google
Calendar API. Run ~org-gcal-fetch~ to retrieve new events and update events
already retrieved, and run ~org-gcal-post-at-point~ on an Org-mode headline
corresponding to a downloaded event to push updates to the events on the Google
Calendar API server.

* Requirements

- [[https://github.com/tkf/emacs-request][tkf/emacs-request]]
- [[https://github.com/jwiegley/alert][jwiegley/alert]]

  =org-gcal= is now available in the famous emacs package repo [[http://melpa.milkbox.net/][MELPA]],
  so the recommended way is to install it through Emacs package
  management system.

* Installation
:PROPERTIES:
:ID:       f5de2e1e-80a1-4ee3-8eeb-fd4db0794448
:CUSTOM_ID:  Installation
:END:

1. Go to [[https://console.developers.google.com/project][Google Developers Console]]

2. Create a project (with any name)

3. Click on the project

4. Click on *APIs & Services* then *Credentials*

5. Click on *Create Credentials* and *Oauth client ID* with
   Application type /Installed application/, Installed application
   type /Other/

6. Click on *Create Client ID*

7. Record the Client ID and Client secret for setup.

8. Under the same *APIs & Services* menu section, select *Library*

9. Scroll down to *Calendar API*. Click the *Enable* button to enable
   calendar API access to the app you created in steps 5 & 6.

   Go to [[https://www.google.com/calendar/render][Google setting page]] to check the calendar ID.

10. Go to [[https://www.google.com/calendar/render][Google setting page]] and click the gear-shaped settings icon
    in the upper right, then select "Settings" from the drop down
    list.

11. Select the "Setting for my Calendars" tab on the left, which will
    display a list of your calendars.

12. Select the calendar you would like to synchronize with. This will
    take you to the "Calendar Settings" page for that calendar. Near
    the end is a section titled "Integrate Calendar". Following the XML,
    ICAL, and HTML tags, you will see your Calendar ID.

13. Copy the Calendar ID for use in the settings below, where you will
    use it as the first element in the org-gcal-file-alist for
    associating calendars with specific org files. You can associate
    different calendars with different org files, so repeat this for
    each calendar you want to use.

** Setting example

#+begin_src elisp
(require 'org-gcal)
(setq org-gcal-client-id "your-id-foo.apps.googleusercontent.com"
      org-gcal-client-secret "your-secret"
      org-gcal-file-alist '(("your-mail@gmail.com" .  "~/schedule.org")
                            ("another-mail@gmail.com" .  "~/task.org")))
#+end_src

** Multiple accounts

   There's no support for multiple accounts.  If you want to use
   org-gcal with calendars from different accounts, you can give
   permissions to the account you configured via the calendar's
   settings interface.

   To get more detailed information you can [[https://digibites.zendesk.com/hc/en-us/articles/200299863-How-do-I-share-my-calendar-with-someone-else-Google-Calendar-or-Outlook-com-][check this link]].

* Testing

To execute compile and regression tests, run ~make~.

This will use your existing Emacs installation to generate a value of
~load-path~ that allows ~org-gcal~ to find all its dependencies, and save it to
~.load-path.el~ in this directory. To delete this and other temporary files,
run ~make clean~.

* Usage
** Event structure
=org-gcal= modifies the following Org-mode properties and drawers when updating
an event from the Google Calendar API:

- Title :: contains the event summary (minus any TODO keywords or tags).
- Timestamps:
  - =SCHEDULED= :: if the =SCHEDULED= attribute of a headline is present,
    =org-gcal= will maintain the start and end times of an event there rather
    than in a timestamp in the =org-gcal= drawer (see below).
- Properties:
  - =calendar-id= (can be modified using the [[help:org-gcal-calendar-id-property][=org-gcal-calendar-id-property=]]
    variable) :: contains the calendar ID of the calendar on which the event is
    maintained.
  - =ETag= (can be modified using the [[help:org-gcal-etag-property][=org-gcal-etag-property=]]
    variable) :: contains the most recent ETag retrieved from the Google Calendar
    API for the event (see [[https://developers.google.com/calendar/v3/version-resources#conditional_modification][the Google Calendar API documentation]]). Used to
    support automatically updating the headline using the most recent event data
    from the API if it has changed on the server since it was last retrieved.
  - =ID= :: contains =<event_id>/<calendar_id>= of the event, as provided by the
    Google Calendar API. Don't change the ID manually, or else the event won't be
    able to retrieved or updated from the headline.
- Drawers:
  - =org-gcal= (can be modified using the [[help:org-gcal-drawer-name][=org-gcal-drawer-name=]] variable) ::
    contains the event description. Unless the timestamp is maintained using
    =SCHEDULED=, the initial line of this drawer contains the event start and
    end time, with the event description starting in the next paragraph.

Apart from these, all other attributes are preserved when an event is updated
in any way.
** Commands
*** =org-gcal-fetch=
   Fetch Google calendar events for all calendar IDs in =org-gcal-file-alist=
   occurring between =org-gcal-up-days= before today and =org-gcal-down-days=
   after today. If the events have already been retrieved and can be located
   using their Org-mode headline IDs, update the event in place. Otherwise,
   insert it at the end of the file corresponding to the event's calendar ID in
   =org-gcal-file-alist=. Does not update events on the server.
*** =org-gcal-sync=
   Like =org-gcal-fetch=, but also update events on the server if they have
   changed locally.
*** =org-gcal-fetch-buffer=
   Fetch changes to Google calendar events to update entries in the current
   buffer, but don't update events on server.
*** =org-gcal-sync-buffer=
   Sync entries in the current buffer with Google Calendar.
*** =org-gcal-post-at-point=
   Update the event represented by the Org-mode headline at POINT on the server
   using the Google Calendar API.

   If the event has changed on the server since it was last retrieved (detected
   using the =ETag= property), automatically update the headline using the
   event data from the server instead of updating the event on the server.
*** =org-gcal-delete-at-point=
   Delete the event represented by the Org-mode headline at POINT on the server
   using the Google Calendar API. This will not delete the Org-mode headline.

   If the event has changed on the server since it was last retrieved (detected
   using the =ETag= property), automatically update the headline using the
   event data from the server instead of updating the event on the server.
*** =org-gcal-refresh-token=
   Refresh the OAuth token. OAuth token expired in 3600 seconds, You
   should refresh token on a regular basis.

* Other features
** Minimize alerts

Modify =org-gcal-notify-p= from =t= to =nil=

* Errors
** Duplicate ID

You get an error like this:

#+BEGIN_EXAMPLE
  Duplicate ID "FOO", also in file BAR
#+END_EXAMPLE

Most likely, this means some calendar events were mistakenly retrieved twice
(for example, if you ran =org-gcal-fetch= on different computers). Search your
Org-mode files for the duplicate ID "FOO" and delete one of the headlines with
duplicate IDs (or just change the =ID= property on one of the events to
something else).


* Similar applications
  [[https://github.com/dengste/org-caldav][dengste/org-caldav]]
